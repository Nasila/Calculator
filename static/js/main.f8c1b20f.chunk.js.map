{"version":3,"sources":["SquareComponent.js","ButtonComponent.js","InputComponent.js","App.js","serviceWorker.js","index.js"],"names":["SquareComponent","onClick","e","props","handleClick","className","this","name","ch","target","React","Component","ButtonComponent","state","buttonSymbols","list","map","element","key","isNaN","InputComponent","class","result","App","val","setState","slice","calculate","math","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAkBeA,G,wNAddC,QAAU,SAAAC,GACT,EAAKC,MAAMC,YAAYF,I,uDAGd,IAAD,OACJG,EAAYC,KAAKH,MAAME,UAC3B,OACC,4BAAQA,UAAW,UAAiBA,EAAWE,KAAMD,KAAKH,MAAMK,GAChEP,QAAS,SAAAC,GAAC,OAAI,EAAKD,QAAQC,EAAEO,OAAOF,QAAQD,KAAKH,MAAMK,Q,GAV5BE,IAAMC,YCmCrBC,E,kDA/Bd,WAAYT,GAAQ,IAAD,8BAClB,cAAMA,IAOPC,YAAc,SAAAF,GACb,EAAKC,MAAMC,YAAYF,IAPvB,EAAKW,MAAQ,CACZC,cAAe,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,IAAI,EAAE,IAAI,MAHxD,E,qDAcT,IAAD,OAEJC,EADoBT,KAAKO,MAAtBC,cACkBE,KAAI,SAACC,EAAQC,GACnC,OAAIC,MAAMF,IAAwB,MAAZA,GAA+B,MAAZA,EAGjC,kBAAC,EAAD,CAAiBT,GAAIS,EAASZ,UAAY,WAAWD,YAAe,EAAKA,cAFzE,kBAAC,EAAD,CAAiBI,GAAIS,EAASb,YAAe,EAAKA,iBAK7D,OACC,yBAAKC,UAAU,UACbU,O,GA3ByBL,IAAMC,WCWrBS,G,6KARb,OACC,yBAAKC,MAAQ,SAASf,KAAKH,MAAMmB,Y,GALPZ,IAAMC,Y,QCgEpBY,E,kDA3Db,aAAe,IAAD,8BACZ,gBAMFtB,QAAU,SAAAuB,GAEG,MAARA,EACD,EAAKC,SAAS,CACZH,OAAQ,KAII,OAARE,EACN,EAAKC,SAAS,CACZH,OAAQ,EAAKT,MAAMS,OAAOI,MAAM,GAAG,KAIvB,MAARF,EACN,EAAKG,YAIP,EAAKF,SAAS,CACZH,OAAQ,EAAKT,MAAMS,OAASE,KA3BlB,EA+BdG,UAAY,WACV,IACQ,EAAKF,SAAS,CAEVH,QAASM,IAAc,EAAKf,MAAMS,SAAW,IAAO,KAE1D,MAAOpB,GACL,EAAKuB,SAAS,CACVH,OAAQ,YArCpB,EAAKT,MAAQ,CACXS,OAAQ,IAHE,E,qDA+CZ,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,4CAEF,kBAAC,EAAD,CAAgBiB,OAAQhB,KAAKO,MAAMS,SACnC,kBAAC,EAAD,CAAiBlB,YAAeE,KAAKL,e,GAtD3BS,IAAMC,WCKJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8c1b20f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\nclass SquareComponent extends React.Component {\r\n\r\n\tonClick = e => {\r\n\t\tthis.props.handleClick(e);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet className = this.props.className;\r\n\t\treturn (\t\t\t\r\n\t\t\t<button className={'square' + \" \" + className} name={this.props.ch} \r\n\t\t\tonClick={e => this.onClick(e.target.name)}>{this.props.ch}</button>\r\n\t\t\t);\r\n\t}\r\n\t\r\n}\r\n\r\nexport default SquareComponent;","import React from 'react';\r\nimport SquareComponent from './SquareComponent.js';\r\nimport './button.css';\r\n\r\nclass ButtonComponent extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbuttonSymbols: ['(',')','CE','C',1,2,3,'+',4,5,6,'-',7,8,9,'*','.',0,'=','/']\r\n\t\t}\r\n\r\n\t}\r\n\r\n\thandleClick = e => {\r\n\t\tthis.props.handleClick(e);\r\n\t};\r\n\r\n\r\n\r\n\trender() {\r\n\t\tconst {buttonSymbols} = this.state;\r\n\t\tlet list = buttonSymbols.map((element,key) => {\r\n\t\t\t\t\tif(!isNaN(element) || element === '.' || element === '=')\r\n\t\t\t\t\t\treturn <SquareComponent ch={element} handleClick = {this.handleClick} />;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\treturn <SquareComponent ch={element} className = \"operator\" handleClick = {this.handleClick}/>;\r\n\t\t\t\t\t});\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"button\">\r\n\t\t\t\t{list}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\t\r\n\r\nexport default ButtonComponent;","import React from 'react';\r\nimport './result.css';\r\n\r\nclass InputComponent extends React.Component {\r\n\t\r\n\trender() {\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div class = \"input\">{this.props.result}</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\nexport default InputComponent;","import React from 'react';\nimport './App.css';\nimport ButtonComponent from './ButtonComponent.js';\nimport InputComponent from './InputComponent.js';\nimport './index.css'\nimport * as math from 'mathjs';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      result: \"\"\n    };\n  }\n\n  onClick = val => {\n\n    if(val === 'C') {\n      this.setState({\n        result: \"\"\n      })\n    }\n\n    else if(val === 'CE') {\n      this.setState({\n        result: this.state.result.slice(0,-1)\n      })\n    }\n\n    else if(val === '=') {\n      this.calculate();\n    }\n\n    else {\n    this.setState({\n      result: this.state.result + val })\n    }\n  }\n\n  calculate = () => {\n    try {\n            this.setState({\n        \n                result: (math.evaluate(this.state.result) || \"\" ) + \"\"\n            })\n        } catch (e) {\n            this.setState({\n                result: \"error\"\n            })\n\n        }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>Calculator</div>\n        </header>\n        <InputComponent result={this.state.result}/>\n        <ButtonComponent handleClick = {this.onClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}